%The dead-lock state for the project only occurs after ending signal.
[!c_ending*] <true> true
&&
[true* . c_ending] [true] false

&&

% Liftoff is the only possible action which takes place after liftoffready, and it cannot occur before liftoffready.
[!liftoffready* . liftoff] false
&&
<true* . liftoffready> <liftoff> true 

&&

%It is impossible to lift off, if any controller is in incorrect status before liftoff
(forall n:Nat . val (n<=2) => (
	[true* . r_responsecheck(n,false) . !r_responsecheck(n,true)* . liftoff] false
	)
)

&&

%If any controller needs to be fixed, the corresponding fixation will inevitably be done, and the problem should be fixed finally. 
(forall n:Nat . val (n<=2) => (
	( [true* . r_responsecheck(n,false)] mu X.([!fix(n)]X && <true> true) )
	&&
	( [true* . r_responsecheck(n,false)] <true* . r_responsecheck(n,true)> true )
	)
)

&&

%BM detachment should be followed by LM followed by the cover of the CM followed by OM
<!(detachmodule(1)&&detachmodule(4)&&detachmodule(2))* . detachmodule(0)> <!(detachmodule(4)&&detachmodule(2))* . detachmodule(1)> <!detachmodule(4)* . detachmodule(4)> <true* . detachmodule(2)> true  
&&
[!detachmodule(0)* . detachmodule(1)] false
&&
[!detachmodule(1)* . detachmodule(4)] false
&&
[!detachmodule(4)* . detachmodule(2)] false

&&

%The detachment of OM happens only after breaking the atmosphere.
[true* . c_responseparacheck(2,true)] <true* . detachmodule(2)> true
&&
[true* . c_responseparacheck(2,false) . !c_responseparacheck(2,true)* . detachmodule(2)] false

&&

% If a module depletes its fuel, it is possible to be discard after being powered off and it should not be discarded if its power is not turned off. (In this project, detachment only happens on module 0, 1 and 2)
(forall n:Nat . val (n <= 2) => (
	( [true* . c_responsecheckfuel(n, false)] <true* . power(n, false) . true* . detachmodule(n)> true )
	&&
	( [true* . c_responsecheckfuel(n, false)] [!power(n, false)* . detachmodule(n)] false )
	)
)

&&

%If CC requests a parameter check it will immediately be checked by the SC
(forall n:Nat . val (n <= 2) => (
	<true* . c_requestparacheck(n)> <paracheck(n)> true
	)
)

&&

% After CC gives a module detaching request, the corresponding module should detach immediately and successfully.
(forall n:Nat . val (n <= 2 || n == 4) => (
	[true* . c_detachment(n)] <detachmodule(n)> true
	)
)

&&

% It is impossible to detach OM if the valves have not been remapped.
[true* . c_responsevalvescheck(false) . !c_responsevalvescheck(true)* . c_detachment(2)] false

&&

%After being requested to remap the valves of OM, the valves will be inevitably remapped.
[true* . c_requestvalvesremap] mu X.([!valvesremap]X && <!detachmodule(2)> true) 

&&

%If the speed is not enough, it will inevitably speed up to approach the setting speed.
[!(power(0,false)&&power(1,false))* . c_responseparacheck(0, false)] <!(power(0,false)&&power(1,false))* . exists n: Nat . val(n <=1) => speedup(n)* . c_responseparacheck(0, true)> true
&&
[!power(1,false)* . c_responseparacheck(0, false)] <!power(1,false)* . speedup(1)* . c_responseparacheck(0, true)> true
&&
[(power(2,true)&&!power(2,false))* . c_responseparacheck(0, false)] <!power(2,false)* . speedup(2)* . c_responseparacheck(0, true)> true

&&

%If the trajectory is not correct, it will inevitably adjust it to approach the setting direction.
[!(power(0,false)&&power(1,false))* . c_responseparacheck(1, false)] <!(power(0,false)&&power(1,false))* . exists n: Nat . val(n <=1) => adjustdirection(n)* . c_responseparacheck(1, true)> true
&&
[!power(1,false)* . c_responseparacheck(1, false)] <!power(1,false)* . adjustdirection(1)* . c_responseparacheck(1, true)> true
&&
[(power(2,true)&&!power(2,false))* . c_responseparacheck(1, false)] <!power(2,false)* . adjustdirection(2)* . c_responseparacheck(1, true)> true